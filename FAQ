1. Why does ActiveRecord::Simple implement so few methods?
----------------------------------------------------------

First, because of the speed. Second, there is no need to create what is not to
be used all the time. We use search, create, delete and update. But we don't
use any sophisticated search every day, so why not write it yourself? ;-)


2. (OLD) Why does ActiveRecord::Simple allow me to getting wrong (names of database fields, setters etc)?
---------------------------------------------------------------------------------------------------

Because of Perl allows. Perl doesn't have native types of variables, structures
or anything else like that. The implementation of this in a separate module
would be a mistake, imho. If you want the type checking, just use another programming
language.

3. Why the module doesn't handle a database connection itself?
--------------------------------------------------------------

We have many ways to handle our database connections, so why we should limit
our choice? ;-) When you use mod_perl, you can use Apache::DBI. In other systems,
such as prefork, you may use something else. You can even write the class that
fit to you perfectly.

4. Can I use just one object to update a several rows?
------------------------------------------------------

Shure. Just determine your object method for insert row data in your
ActiveRecord::Simple-based class:

    sub insert { __PACKAGE__->new($_[1])->save() }

And then in your script:

    my $log = MyLog::DB->new();
    $log->insert({ date => 'now()', 'text' => 'login' });
    $log->insert({ date => 'now()', 'text' => 'logout' });

5. May I use the ordering of my searching results?
--------------------------------------------------

Yes. Just run ordering methods (order_by, desc, asc) right before you fetching it:

    my @persons = MyModel::Person->find('age > ?', 21)->order_by('name')->desc->fetch();

6. May I use limit and offset in my searching results?
------------------------------------------------------

Yes. There are two methods: limit and offset:

   my @two_persons = MyModel::Person->find()->limit(2)->offset(1)->fetch();

